const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken'); 
const Company = require('../models/company');

exports.login = async (req, res) => {
  const { email, password } = req.body;

  try {
    // Fetch the user by email
    const user = await Company.findOne({ email });

    // Check if the user exists
    if (!user) {
      return res.status(404).json({ message: "User does not exist" });
    }

    // Check if the password matches
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ message: "Invalid Credentials" });
    }

    // Generate JWT token
    const payload = { email: user.email, sub: user._id };
    const accessToken = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });

    return res.status(200).json({ accessToken });
  } catch (error) {
    // Handle unexpected errors
    console.error('Login error:', error);
    return res.status(500).json({ message: "An error occurred during login." });
  }
};


exports.register = async (req, res) => {
  const { email, name, password } = req.body; // No need to take 'role' from the body

  try {
    // Check if the user already exists
    const existingUser = await Company.findOne({ email });

    if (existingUser) {
      return res.status(409).json({ message: 'User with this email already exists' }); // 409 Conflict
    }

    // Hash the password
    const hashPassword = await bcrypt.hash(password, 10);

    // Generate JWT token
    const token = jwt.sign({ email }, process.env.JWT_SECRET, { expiresIn: '1d' });

    // Create the new user with role set to 'Admin'
    const newUser = await Company.create({
      name,
      email,
      password: hashPassword,
      token,
      role: 'Admin', // Automatically set the role to 'Admin'
    });

    // Return success response
    return res.status(201).json({ message: 'Admin registered successfully', user: newUser }); // 201 Created

  } catch (error) {
    console.error('Registration error:', error);
    return res.status(500).json({ message: 'An error occurred during registration.' });
  }
};
